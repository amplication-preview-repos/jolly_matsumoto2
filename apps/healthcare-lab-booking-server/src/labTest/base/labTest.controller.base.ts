/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LabTestService } from "../labTest.service";
import { LabTestCreateInput } from "./LabTestCreateInput";
import { LabTest } from "./LabTest";
import { LabTestFindManyArgs } from "./LabTestFindManyArgs";
import { LabTestWhereUniqueInput } from "./LabTestWhereUniqueInput";
import { LabTestUpdateInput } from "./LabTestUpdateInput";

export class LabTestControllerBase {
  constructor(protected readonly service: LabTestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LabTest })
  async createLabTest(
    @common.Body() data: LabTestCreateInput
  ): Promise<LabTest> {
    return await this.service.createLabTest({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LabTest] })
  @ApiNestedQuery(LabTestFindManyArgs)
  async labTests(@common.Req() request: Request): Promise<LabTest[]> {
    const args = plainToClass(LabTestFindManyArgs, request.query);
    return this.service.labTests({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LabTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async labTest(
    @common.Param() params: LabTestWhereUniqueInput
  ): Promise<LabTest | null> {
    const result = await this.service.labTest({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LabTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLabTest(
    @common.Param() params: LabTestWhereUniqueInput,
    @common.Body() data: LabTestUpdateInput
  ): Promise<LabTest | null> {
    try {
      return await this.service.updateLabTest({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LabTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLabTest(
    @common.Param() params: LabTestWhereUniqueInput
  ): Promise<LabTest | null> {
    try {
      return await this.service.deleteLabTest({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
